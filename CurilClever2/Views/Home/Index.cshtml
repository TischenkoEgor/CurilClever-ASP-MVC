@using CurilClever2.ViewModels
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@model HomePageViewModel
@{
  ViewData["Title"] = @Localizer["Title"];
  ViewData["PageDescription"] = @Localizer["PageDesc"];
}
<div class="jumbotron text-center">
  <h2>@Localizer["Header"]</h2>
</div>
<div class="container">
  <div class="row">
    <div class="col-md-6">
      <h3 class="text-center">@Localizer["LastNewsHeader"]</h3>
      <table class="table table-striped table-hover" id="lastnewstable">
        <tr>
          <td>@Localizer["Date"]</td>
          <td>@Localizer["Description"]</td>
          <td>@Localizer["link"]</td>
          <td></td>
        </tr>

        @foreach (News news in Model.News)
        {
        <tr>
          <td>@news.Created.ToUniversalTime()</td>

          <td><a asp-controller="News" asp-action="Details" asp-route-id="@news.id">@news.TextShort</a></td>

          <td><a href="@news.ObjectUrl">@Localizer["Follow"]</a></td>
          <td></td>
        </tr>
        }
      </table>
      <script type="text/javascript">
        $(function () {
          $("#lastnewstable").sortable({
            items: 'tr:not(tr:first-child)',
            cursor: 'pointer',
            axis: 'y',
            dropOnEmpty: false,
            start: function (e, ui) {
              ui.item.addClass("selected");
            },
            stop: function (e, ui) {
              ui.item.removeClass("selected");
              $(this).find("tr").each(function (index) {
                if (index > 0) {
                  //$(this).find("td").eq(2).html(index);
                }
              });
            }
          });
        });
      </script>
    </div>
    <div class="col-md-6">
      <h3 class="text-center">@Localizer["DbStatus"]</h3>
      <div id="barcontainer">
        <svg id="mainbar" />
      </div>
      <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
      <style>
        div#barcontainer {
          width: 100%;
          height: 400px;
          margin: auto;
          background-color: #2F4A6D;
        }

        svg {
          width: 100%;
          height: 100%;
        }

        .bar {
          fill: #80cbc4;
        }

        text {
          font-size: 12px;
          fill: #fff;
        }

        path {
          stroke: gray;
        }

        line {
          stroke: gray;
        }

          line#limit {
            stroke: #FED966;
            stroke-width: 3;
            stroke-dasharray: 3 6;
          }

        .grid path {
          stroke-width: 0;
        }

        .grid .tick line {
          stroke: #9FAAAE;
          stroke-opacity: 0.3;
        }

        text.divergence {
          font-size: 14px;
          fill: #2F4A6D;
        }

        text.value {
          font-size: 14px;
        }

        text.title {
          font-size: 22px;
          font-weight: 600;
        }

        text.label {
          font-size: 14px;
          font-weight: 400;
        }

        text.source {
          font-size: 10px;
        }
      </style>

      <script src="https://d3js.org/d3.v5.min.js"></script>
      <script type="text/javascript">
        window.onload = function () {
          const sample = [
              {
                  language: '@Localizer["Clients"]',
                  value: @Model.CountOfClients,
                  color: '#000000'
              },
              {
                  language: '@Localizer["Orders"]',
                  value: @Model.CountOfOrders,
                  color: '#000000'
              },
              {
                  language: '@Localizer["Hotels"]',
                  value: @Model.CountOfHotels,
                  color: '#000000'
              },
              {
                  language: '@Localizer["Clients Comments"]',
                  value: @Model.CountOfClientComments,
                  color: '#000000'
              },
              {
                  language: '@Localizer["Orders Comments"]',
                  value: @Model.CountOfOrders,
                  color: '#000000'
              }
          ];

          const svg = d3.select('svg');
          const svgContainer = d3.select('#container');

          const margin = 80;
          const width = $('#barcontainer').width() - 2 * margin;;//.css('width') - 2 * margin;
          const height = $('#barcontainer').height() - 2 * margin;//.css('height') - 2 * margin;

          const chart = svg.append('g')
              .attr('transform', `translate(${margin}, ${margin})`);

          const xScale = d3.scaleBand()
              .range([0, width])
              .domain(sample.map((s) => s.language))
              .padding(0.4)

          const yScale = d3.scaleLinear()
              .range([height, 0])
              .domain([0, @Model.MaxCount()]);

          // vertical grid lines
          // const makeXLines = () => d3.axisBottom()
          //   .scale(xScale)

          const makeYLines = () => d3.axisLeft()
              .scale(yScale)

          chart.append('g')
              .attr('transform', `translate(0, ${height})`)
              .call(d3.axisBottom(xScale));

          chart.append('g')
              .call(d3.axisLeft(yScale));

          // vertical grid lines
          // chart.append('g')
          //   .attr('class', 'grid')
          //   .attr('transform', `translate(0, ${height})`)
          //   .call(makeXLines()
          //     .tickSize(-height, 0, 0)
          //     .tickFormat('')
          //   )

          chart.append('g')
            .attr('class', 'grid')
            .call(makeYLines()
                .tickSize(-width, 0, 0)
                .tickFormat('')
            )

          const barGroups = chart.selectAll()
            .data(sample)
            .enter()
            .append('g')

          barGroups
          .append('rect')
          .attr('class', 'bar')
          .attr('x', (g) => xScale(g.language))
          .attr('y', (g) => yScale(g.value))
          .attr('height', (g) => height - yScale(g.value))
          .attr('width', xScale.bandwidth())
          .on('mouseenter', function (actual, i) {
              d3.selectAll('.value')
                  .attr('opacity', 0)

              d3.select(this)
                  .transition()
                  .duration(300)
                  .attr('opacity', 0.6)
                  .attr('x', (a) => xScale(a.language) - 5)
                  .attr('width', xScale.bandwidth() + 10)

              const y = yScale(actual.value)

              line = chart.append('line')
                .attr('id', 'limit')
                .attr('x1', 0)
                .attr('y1', y)
                .attr('x2', width)
                .attr('y2', y)

              barGroups.append('text')
                .attr('class', 'divergence')
                .attr('x', (a) => xScale(a.language) + xScale.bandwidth() / 2)
                .attr('y', (a) => yScale(a.value) + 30)
                .attr('fill', 'white')
                .attr('text-anchor', 'middle')
                .text((a, idx) => {
                    const divergence = (a.value - actual.value).toFixed(1)

                    let text = ''
                    if (divergence > 0) text += '+'
                    text += `${divergence}`

                    return idx !== i ? text : '';
                })

          })
          .on('mouseleave', function () {
              d3.selectAll('.value')
                  .attr('opacity', 1)

              d3.select(this)
                  .transition()
                  .duration(300)
                  .attr('opacity', 1)
                  .attr('x', (a) => xScale(a.language))
                  .attr('width', xScale.bandwidth())

              chart.selectAll('#limit').remove()
              chart.selectAll('.divergence').remove()
          })
        // select all the text elements for the xaxis
        svg.selectAll(".tick > text")
        .attr("transform", function(d) {
          return "translate(" + this.getBBox().height * -2 + "," + this.getBBox().height + ")rotate(-20)";
        });
      }
      </script>
    </div>
  </div>
  <div class="row">
    <div class="col-md-12">

      <h3 class="text-center">@Localizer["Last Orders"]</h3>
      <table class="table table-striped table-hover">
        <tr>
          <td>@Localizer["Client"]</td>
          <td>@Localizer["Hotel"]</td>
          <td>@Localizer["Dates"]</td>
          <td>@Localizer["Price"]</td>
          <td></td>

        </tr>

        @foreach (Order order in Model.Orders)
        {
        <tr>
          <td>@order.Client.FIO</td>
          <td>@order.Hotel.Name</td>
          <td>@order.BeginTravelDate.ToShortDateString() - @order.EndTravelDate.ToShortDateString()</td>
          <td>@order.Price</td>
          <td><a asp-controller="Order" asp-action="Details" asp-route-id="@order.id">@Localizer["FollowTravel"]</a> </td>
        </tr>
        }
      </table>
    </div>
  </div>
  <div class="row">
    <div class="col-md-12">
      <h3 class="text-center">@Localizer["Office Map"]</h3>

      <!-- загружаем яндекс карты через апи  -->
      <script src="http://api-maps.yandex.ru/2.1/?load=package.full&lang=ru-RU&apikey=781dfc83-488b-4172-9d87-ccf75cf16987" type="text/javascript"></script>
      <div id="map" style="width: 100%; height: 300px"></div>

      <!-- скрипт добавления балунов-->
      <script type="text/javascript">
       
        ymaps.ready(init);
        var myMap;

        function init() {
          // позиционируем центр карты
          myMap = new ymaps.Map("map", {
            center: [55.76, 37.64],
            zoom: 10
          }, {
              balloonMaxWidth: 200
            });
          //добавляем масштаб
          myMap.controls
            // Кнопка изменения масштаба.
            .add('zoomControl', { left: 5, top: 5 })

          // запрашиваем  у бразуера возможность получения гео-координат
          if (navigator.geolocation) {
            // если есть получаем координаты в функцию-обработчик
            navigator.geolocation.getCurrentPosition(showPosition);
          } else {
            // в противном случае выводим сообщение об ошибке
            alert("Геолокация в вашем браузере отключена");
          }

          // функция обработчик получения координат от браузера
          // в качетсве аргумета - информация о местоположении
          function showPosition(position) {
            // alert("Обработка координат");
            // добавлеям в нашу карту новый плейсмарк с координатами широты и долготы положения нашего юзера
            myMap.geoObjects
              .add(new ymaps.Placemark([position.coords.latitude, position.coords.longitude],
                {
                  iconCaption: 'Ваше текущее положение'
                }, {
                  preset: 'islands#redCircleDotIcon'
                }))
          }
          // добавляем балуны офисов
          myMap.geoObjects
            .add(new ymaps.Placemark([55.76, 37.74],
              {
                iconCaption: 'новый офис (головной)'
              }, {
                preset: 'islands#blueBeachIcon'
              }))
            .add(new ymaps.Placemark([55.826479, 37.487208], {
              iconCaption: 'старый офис (филиал)'
            }, {
                preset: 'islands#blueAirportIcon'
              }))


        }
      </script>
    </div>
  </div>
</div>

